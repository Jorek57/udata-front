---
version: 2.1

orbs:
  browser-tools: circleci/browser-tools@1.2.3

jobs:
  python:
    docker:
      - image: cimg/python:3.7
      - image: mongo:3.6
      - image: redis:alpine
    environment:
       BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - restore_cache:
          keys:
          - py3-cache-v3-{{ arch }}-{{ checksum "poetry.lock" }}
          - py3-cache-v3-{{ arch }}-{{ .Branch }}
      - run:
          name: Update poetry
          command: |
            poetry self update
      - run:
          name: Install python dependencies
          command: |
            # Build a wheel release
            if [[ $CIRCLE_TAG ]]; then
                # This is a tagged release
                sed -i "s/udata = { path = \"..\/udata\", develop = true }/udata = \">4\"/" pyproject.toml
            else
                # This is a simple development build
                sed -i "s/udata = { path = \"..\/udata\", develop = true }/udata = { git = \"https:\/\/github.com\/opendatateam\/udata.git\", branch = \"poetrySwitch\" }/" pyproject.toml
            fi
            poetry lock
            poetry install
      - save_cache:
          key: py3-cache-v3-{{ arch }}-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
      - save_cache:
          key: py3-cache-v3-{{ arch }}-{{ .Branch }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
      - run:
          name: Run tests
          command: |
            mkdir -p reports/python
            poetry run inv test --report
      - store_test_results:
          path: reports
      - store_artifacts:
          path: reports/
          destination: reports

  assets:
    docker:
      # TODO make an image based on 2-alpine w/ nvm and phantom deps
      - image: udata/circleci:py3
    environment:
       BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - run:
          name: Compute JS dependencies key
          command: cat .nvmrc package.json > js.deps
      - run:
          name: Get the base reference branch
          command: export BASE_BRANCH=$(base_branch)
      - run:
          name: patch-package hash
          command: md5sum patches/* > patches.hash
      - restore_cache:
          keys:
            - js-cache-{{ arch }}-{{ checksum "js.deps" }}-{{ checksum "patches.hash" }}
            - js-cache-{{ arch }}-{{ .Branch }}-{{ checksum "patches.hash" }}
            - js-cache-{{ arch }}-{{ .Environment.BASE_BRANCH }}
      - run:
          name: Install NodeJS and dependencies
          command: nvm install && npm install
      - save_cache:
          key: js-cache-{{ arch }}-{{ checksum "js.deps" }}-{{ checksum "patches.hash" }}
          paths:
          - node_modules
      - save_cache:
          key: js-cache-{{ arch }}-{{ .Branch }}-{{ checksum "patches.hash" }}
          paths:
          - node_modules
      - run:
          name: Compile assets
          command: |
            nvm use
            npm run build

      - persist_to_workspace:
          root: .
          paths:
            - udata_front/theme/gouvfr/static


  lighthouse:
    docker:
      - image: cimg/python:3.7-browsers
      - image: mongo:3.6
      - image: redis:alpine
    steps:
      - checkout
      - browser-tools/install-chrome
      - attach_workspace:
          at: .
      - run:
          name: Generate udata fixtures
          command: |
            poetry update --lock "https://github.com/opendatateam/udata.git"
            poetry install
            udata generate-fixtures
      - run:
          name: Install lighthouse
          command: sudo npm install -g @lhci/cli@0.8.x
      - run:
          name: Prepare udata.cfg file with udata-front plugin
          command: cp .lighthouseci/front-plugin-udata.cfg udata.cfg
      - run:
          name: Run lighthouse
          command: npm run lighthouse
      - store_artifacts:
          path: reports/
          destination: reports

  dist:
    docker:
      - image: cimg/python:3.7
    environment:
       BASH_ENV: /root/.bashrc
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build a distributable package
          command: |
            poetry build
      - store_artifacts:
          path: dist
      - persist_to_workspace:
          root: .
          paths:
            - dist

  publish:
    docker:
      - image: cimg/python:3.7
    steps:
      - attach_workspace:
          at: .
      - deploy:
          name: Publish on PyPI
          command: |
            poetry publish --username "${PYPI_USERNAME}" --password "${PYPI_PASSWORD}" --no-interaction

workflows:
  version: 2
  build:
    jobs:
      - python:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - assets:
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - lighthouse:
          requires:
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - dist:
          requires:
            - python
            - assets
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
      - publish:
          requires:
            - dist
          filters:
            branches:
              only:
                - master
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
          context: org-global
